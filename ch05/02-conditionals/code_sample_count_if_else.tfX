# Simulate if-else logic using count
# Example grants cloudwatch full access if bool is true, otherwise read only

# This stuff looks a little hacky, but it works and conceals complexity from users.

resource "aws_iam_policy" "cloudwatch_read_only" {
  name   = "cloudwatch-read-only"
  policy = data.aws_iam_policy_document.cloudwatch_read_only.json
}

data "aws_iam_policy_document" "cloudwatch_read_only" {
  statement {
    effect = "Allow"
    actions = [
      "cloudwatch:Describe*",
      "cloudwatch:Get*",
      "cloudwatch:List*"
    ]
    resources = ["*"]
  }
}

resource "aws_iam_policy" "cloudwatch_full_access" {
  name   = "cloudwatch-full-access"
  policy = data.aws_iam_policy_document.cloudwatch_full_access.json
}

data "aws_iam_policy_document" "cloudwatch_full_access" {
  statement {
    effect    = "Allow"
    actions   = ["cloudwatch:*"]
    resources = ["*"]
  }
}

variable "give_adam_cloudwatch_full_access" {
  description = "If true, adam gets full access to CloudWatch"
  type        = bool
}

resource "aws_iam_user_policy_attachment" "adam_cloudwatch_full_access" {
  count = var.give_adam_cloudwatch_full_access ? 1 : 0

  user       = aws_iam_user.example[0].name
  policy_arn = aws_iam_policy.cloudwatch_full_access.arn
}

resource "aws_iam_user_policy_attachment" "adam_cloudwatch_read_only" {
  count = var.give_adam_cloudwatch_full_access ? 0 : 1 # note the order

  user       = aws_iam_user.example[0].name
  policy_arn = aws_iam_policy.cloudwatch_read_only.arn
}

# Ternary output method works but is brittle
# Errors out if one of the policies don't exist?
output "neo_cloudwatch_policy_arn" {
  value = (
  var.give_adam_cloudwatch_full_access
  ? aws_iam_user_policy_attachment.adam_cloudwatch_full_access[0].policy.arn
  : aws_iam_user_policy_attachment.adam_cloudwatch_read_only[0].policy.arn
  )
}

# Creates a list of the ARNs, but there will only be one result
# one() ensures there is only one result in the list, throws an error if there's not
# one() also returns the value in the list.
# Preferred over teh ternary output since it will give an easy-to-find error on failure.
output "neo_cloudwatch_policy_arn_improved" {
  value = one(concat(
    aws_iam_user_policy_attachment.adam_cloudwatch_full_access[*].policy.arn,
    aws_iam_user_policy_attachment.adam_cloudwatch_read_only[*].policy.arn
  ))
}
